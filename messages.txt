References: Videos
https://fullstackmastery.com/courses/RMQJAVA/lessons/65
https://www.youtube.com/watch?v=trRAaPxRZ7U


Message Oriented Middleware MOM
Message Broker Software

Wir befinden uns in der Domaine für 'Event-driven-Microservices'
Message Format ist beliebig, XML, Json, binary, ...

Flow Control
------------
RabbitMQ vermindert die Geschwindgkeit von Verbindungen (tcp backpressure) die mehr Messages senden als verarbeitet werden können. 
Funktioniert ohne zusätzliche Konfiguration


Vorteile
    Asynchrone/synchrone Kommunikation
    Server/Dienst muss nicht sofort verfügbar sein
    Message-Warteschlangen
    Meist schnellere Ausführung als Funktionsaufruf-basierte Programme
    Lose Kopplung von Server/Clients
    Mehr Toleranz für Änderungen der bestehenden Funktionen
    Verbesserte Verfügbarkeit der Systeme
    Parallele Verarbeitung von Nachrichten möglich

Nachteile
    Ausfall der MOM legt alle angeschlossenen Systeme lahm
    Designen, Testen, Debuggen und Entwicklung der Bauteile sind für Synchron-Programmierer ungewohnt

RabbitMQ als AMQP-Broker

RabbitMQ ist eine Open Source Message Broker Software, die das Advanced Message Queuing Protocol (AMQP) implementiert. 
Der RabbitMQ-Server ist in Erlang (Actor-Modell) geschrieben. 

Die Software wird entwickelt und gepflegt von Rabbit Technologies Ltd, einem Zusammenschluss von LShift und Cohesive FT, die im April 2010 von SpringSource erworben wurde. 


AMQP
Advanced Message Queuing Protocol (AMQP) ist ein in Entwicklung befindliches Wirelevel-Protokoll. 
Um der großen Verbreitung von JMS Rechnung zu tragen, sind alle JMS Funktionen in dem Protokoll eingearbeitet.


Das Advanced Message Queuing Protocol (AMQP) ist ein offener Standard, der ein binäres Netzwerkprotokoll auf Anwendungsebene für eine Message-orientierte Middleware (MOM) darstellt.[1]

AMQP stellt ein binäres Netzwerkprotokoll dar, das unabhängig von der Programmiersprache ist. Um der großen Verbreitung von JMS Rechnung zu tragen, sind alle Funktionen von JMS in dem Protokoll eingearbeitet worden. Dies ermöglicht es den Entwicklern, weiter die JMS-Schnittstelle zu nutzen, während sich MOMs untereinander mit AMQP verständigen können. 

Homepage: https://www.amqp.org/

10 TODO translate
The Advanced Message Queuing Protocol (AMQP) is an open standard for passing business messages between applications or organizations.  It connects systems, feeds business processes with the information they need and reliably transmits onward the instructions that achieve their goals. 
AMQP is designed to solve real problems, completely.

Key Capabilities

AMQP connects across:

    Organizations – applications in different organizations
    Technologies – applications on different platforms
    Time – systems don’t need to be available simultaneously
    Space – reliably operate at a distance, or over poor networks

Business Case

The main reasons an enterprise will chose AMQP over proprietary alternatives are:

    Realize the savings commoditization brings; remove vendor lock-in
    Connect applications on different platforms; choose the right platform for the job
    Connect to business partners using a full featured open standard; remove technical barriers to trade
    Position for innovations built upon the foundation of AMQP

Key Features

AMQP was designed with the following main characteristics as goals:

    Security
    Reliability
    Interoperability
    Standard
    Open

10 TODO end

Video 1

Begriffe
--------
Provider, Sender

Broker, Message-Broker

Consumer, Receiver, Subscriber

Queue

Channel: Verbindung zwischen Sender und Broker oder Consumer und Broker

Sicherstellung einer Zustellung
-------------------------------
Queue -> Confirm -> Provider
Consumer -> Acknowledge -> Queue


Im Falle eines Fehlers werden Meldungen evtl. mehrfach zugestellt. 
Das Programm muss damit umgehen können. Garantiert wird 'at least ones'

Pup/Sub
Neues Konzept bei AMQP ist Exchange die jeweils einer Queue vorgeschaltet ist.
Genauer: Sie ist and die Queue mittels Binding-Key gebunden
Mit Hilfe von Exchanges kann ein Pub/Sub System erstellt werden.
Exchange Arten (Strategien): 
	- Fan Out 
	- Direct. Hat einen Binding-Key. Publisher provides a Routing-Key. BK RK müssen zueinander passen.
	- Topic. BK kann Wildcards enthalten.

Store and Forward Queues
------------------------
Pub und Sub müssen nicht gleichzeitig laufen.

Task Queues
-----------
Lösung für mehrere Consumer gleichzeitig

